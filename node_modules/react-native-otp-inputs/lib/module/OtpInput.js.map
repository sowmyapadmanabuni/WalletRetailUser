{"version":3,"sources":["OtpInput.tsx"],"names":["React","useState","useEffect","forwardRef","Platform","TextInput","View","majorVersionIOS","parseInt","Version","isOTPSupported","OS","OtpInput","ref","focusStyles","handleTextChange","inputContainerStyles","inputStyles","placeholder","selectTextOnFocus","inputValue","handleKeyPress","rest","focused","setFocused","current","setNativeProps","value","text","select","ios","android"],"mappings":"iSAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,UAArC,KAAuD,OAAvD,CACA,OACEC,QADF,CAGEC,SAHF,CAKEC,IALF,KAUO,cAVP,CAuBA,GAAMC,CAAAA,eAAuB,CAAGC,QAAQ,IAAIJ,QAAQ,CAACK,OAAb,CAAwB,EAAxB,CAAxC,CACA,GAAMC,CAAAA,cAAuB,CAAGN,QAAQ,CAACO,EAAT,GAAgB,KAAhB,EAAyBJ,eAAe,EAAI,EAA5E,CAEA,GAAMK,CAAAA,QAAQ,CAAGT,UAAU,CACzB,cAYEU,GAZF,CAaK,IAXDC,CAAAA,WAWC,MAXDA,WAWC,CAVDC,gBAUC,MAVDA,gBAUC,CATDC,oBASC,MATDA,oBASC,CARDC,WAQC,MARDA,WAQC,CAPDC,WAOC,MAPDA,WAOC,CANDC,iBAMC,MANDA,iBAMC,CALDC,UAKC,MALDA,UAKC,CAJDC,cAIC,MAJDA,cAIC,CAHEC,IAGF,sLAC2BrB,QAAQ,CAAC,KAAD,CADnC,wCACIsB,OADJ,eACaC,UADb,eAGHtB,SAAS,CAAC,UAAM,CAEdW,GAAG,EAAIA,GAAG,CAACY,OAAX,EAAsBZ,GAAG,CAACY,OAAJ,CAAYC,cAAZ,CAA2B,CAAEC,KAAK,CAAEP,UAAT,CAAqBQ,IAAI,CAAER,UAA3B,CAA3B,CAAtB,CACD,CAHQ,CAGN,CAACP,GAAD,CAAMO,UAAN,CAHM,CAAT,CAKA,MACE,qBAAC,IAAD,EAAM,KAAK,CAAE,CAACJ,oBAAD,CAAuBO,OAAO,EAAIT,WAAlC,CAAb,iDACE,oBAAC,SAAD,WACE,SAAS,CAAE,CADb,CAEE,MAAM,CAAE,wBAAMU,CAAAA,UAAU,CAAC,KAAD,CAAhB,EAFV,CAGE,YAAY,CAAET,gBAHhB,CAIE,OAAO,CAAE,yBAAMS,CAAAA,UAAU,CAAC,IAAD,CAAhB,EAJX,CAKE,UAAU,CAAEH,cALd,CAME,GAAG,CAAER,GANP,CAOE,WAAW,CAAEK,WAPf,CASE,iBAAiB,CAAEd,QAAQ,CAACyB,MAAT,CAAgB,CAAEC,GAAG,CAAEX,iBAAP,CAA0BY,OAAO,CAAE,IAAnC,CAAhB,CATrB,CAUE,KAAK,CAAEd,WAVT,CAWE,eAAe,CAAEP,cAAc,CAAG,aAAH,CAAmB,MAXpD,CAYE,qBAAqB,CAAC,aAZxB,EAaMY,IAbN,mDADF,CADF,CAmBD,CAzCwB,CAA3B,CA4CA,cAAeV,CAAAA,QAAf","sourcesContent":["import React, { useState, useEffect, forwardRef } from 'react';\nimport {\n  Platform,\n  StyleProp,\n  TextInput,\n  TextStyle,\n  View,\n  ViewStyle,\n  TextInputProps,\n  NativeSyntheticEvent,\n  TextInputKeyPressEventData,\n} from 'react-native';\n\ntype Props = TextInputProps & {\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  firstInput: boolean;\n  focusStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  numberOfInputs: number;\n  handleTextChange: (text: string) => void;\n  inputValue: string;\n  handleKeyPress: (keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>) => void;\n};\n\nconst majorVersionIOS: number = parseInt(`${Platform.Version}`, 10);\nconst isOTPSupported: boolean = Platform.OS === 'ios' && majorVersionIOS >= 12;\n\nconst OtpInput = forwardRef<TextInput, Props>(\n  (\n    {\n      focusStyles,\n      handleTextChange,\n      inputContainerStyles,\n      inputStyles,\n      placeholder,\n      selectTextOnFocus,\n      inputValue,\n      handleKeyPress,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [focused, setFocused] = useState(false);\n\n    useEffect(() => {\n      // @ts-ignore\n      ref && ref.current && ref.current.setNativeProps({ value: inputValue, text: inputValue });\n    }, [ref, inputValue]);\n\n    return (\n      <View style={[inputContainerStyles, focused && focusStyles]}>\n        <TextInput\n          maxLength={1}\n          onBlur={() => setFocused(false)}\n          onChangeText={handleTextChange}\n          onFocus={() => setFocused(true)}\n          onKeyPress={handleKeyPress}\n          ref={ref}\n          placeholder={placeholder}\n          // https://github.com/facebook/react-native/issues/18339\n          selectTextOnFocus={Platform.select({ ios: selectTextOnFocus, android: true })}\n          style={inputStyles}\n          textContentType={isOTPSupported ? 'oneTimeCode' : 'none'}\n          underlineColorAndroid=\"transparent\"\n          {...rest}\n        />\n      </View>\n    );\n  },\n);\n\nexport default OtpInput;\n"]}